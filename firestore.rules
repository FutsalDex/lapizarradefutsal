rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // =============================
    // üîí UTILIDADES
    // =============================
    function isAuth() {
      return request.auth != null;
    }

    function authEmail() {
      return isAuth() ? request.auth.token.email : null;
    }

    function isTeamOwner(teamId) {
      return isAuth() &&
        get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
    }

    function isTeamMember(teamId) {
      return isAuth() &&
        get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds != null &&
        get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
    }

    // Comprueba si el usuario tiene una invitaci√≥n aceptada al equipo
    function isAcceptedInvite(teamId) {
      return isAuth() &&
        exists(/databases/$(database)/documents/invitations/$(request.auth.uid + "_" + teamId));
    }

    // Permite acceso si es propietario, miembro o invitado aceptado
    function canAccessTeam(teamId) {
      return isTeamOwner(teamId) || isTeamMember(teamId) || isAcceptedInvite(teamId);
    }

    // =============================
    // üß© TEAMS
    // =============================
    match /teams/{teamId} {
      // Leer el documento del equipo
      allow get: if canAccessTeam(teamId);

      // Listar equipos (solo usuarios autenticados)
      allow list: if isAuth();

      // Crear un equipo (solo el propietario)
      allow create: if isAuth()
        && request.resource.data.ownerId == request.auth.uid
        && (request.resource.data.memberIds is list)
        && request.resource.data.memberIds.hasAny([request.auth.uid]);

      // Actualizar o eliminar un equipo (solo propietario)
      allow update, delete: if isTeamOwner(teamId);
    }

    // =============================
    // üßë‚Äçü§ù‚Äçüßë SUBCOLECCIONES DE TEAMS
    // =============================
    match /teams/{teamId}/{subcollection}/{docId} {
      allow read, write: if canAccessTeam(teamId);
    }

    // =============================
    // ‚úâÔ∏è INVITATIONS
    // =============================
    match /invitations/{invId} {
      // Crear invitaci√≥n
      allow create: if isAuth();

      // Leer una invitaci√≥n
      allow get: if isAuth() && (
        isTeamOwner(resource.data.teamId) ||
        resource.data.invitedUserEmail == authEmail()
      );

      // Listar invitaciones (el cliente filtra por email)
      allow list: if isAuth();

      // Actualizar invitaci√≥n
      allow update: if isAuth() && (
        resource.data.invitedUserEmail == authEmail() ||
        isTeamOwner(resource.data.teamId)
      );

      // Borrar invitaci√≥n
      allow delete: if isAuth() && isTeamOwner(resource.data.teamId);
    }

    // =============================
    // üßç USERS
    // =============================
    match /users/{userId} {
      allow get, update, delete: if isAuth() && request.auth.uid == userId;
      allow create: if isAuth() && request.resource.data.uid == request.auth.uid;
      allow list: if false;
    }

    match /users/{userId}/{subcollection}/{docId} {
      allow read, write: if isAuth() && request.auth.uid == userId;
    }

    // =============================
    // üèãÔ∏è EXERCISES (lectura p√∫blica)
    // =============================
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}
