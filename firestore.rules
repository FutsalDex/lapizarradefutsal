/**
 * @fileoverview Firestore Security Rules for Futsal Training App
 *
 * Core Philosophy:
 * This ruleset prioritizes user data ownership and role-based access control for teams.
 * Users can only manage their own profile data and the teams they own.
 * Public read access is granted to the exercises collection.
 *
 * Data Structure:
 * - /teams/{teamId}: Teams are the central organizing principle. Each team has an owner.
 * - /teams/{teamId}/players/{playerId}: Subcollection to manage team members
 * - /users/{userId}: Stores user profile information, secured by ownership.
 * - /exercises/{exerciseId}: A public library of futsal exercises.
 * - /teamInvitations/{invitationId}: Invitations for users to join teams.
 * - /users/{userId}/favorites/{exerciseId}: User-specific favorites list
 * - /users/{userId}/sessions/{sessionId}: User-specific training sessions.
 * - /users/{userId}/matches/{matchId}: User-specific match records.
 *
 * Key Security Decisions:
 * - Users can only create, update, and delete teams they own.
 * - Exercises are publicly readable.
 * - Users can only manage their own profile data.
 * - Listing of user documents is denied.
 * - Team invitations can only be created with valid team and user references.
 *
 * Denormalization for Authorization:
 * - Team documents store the `ownerId` to simplify ownership checks.
 *
 * Structural Segregation:
 * - User-specific data (sessions, matches, favorites) is stored under the /users/{userId} collection for private access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     * Use this function for update and delete operations to prevent acting on non-existent data.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that the incoming `ownerId` matches the authenticated user's ID on create.
     * Use this for collections where the ownerId is immutable and defined at creation.
     */
    function isValidOwnerOnCreate(ownerId) {
      return request.resource.data[ownerId] == request.auth.uid;
    }

    /**
     * @description Enforces that the `ownerId` field is immutable.
     * This pattern allows partial updates while preventing the owner from being changed.
     */
    function isOwnerIdImmutable(ownerId) {
      return request.resource.data[ownerId] == resource.data[ownerId];
    }

    /**
     * @description Rules for the /teams collection.
     * @path /teams/{teamId}
     * @allow (create) User 'user_abc' can create a team if request.resource.data.ownerId == 'user_abc'.
     * @allow (update) User 'user_abc' can update a team if they are the owner.
     * @allow (delete) User 'user_abc' can delete a team if they are the owner.
     * @deny (create) User 'user_xyz' cannot create a team with request.resource.data.ownerId == 'user_abc'.
     * @deny (update) User 'user_xyz' cannot update a team owned by 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /teams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isValidOwnerOnCreate('ownerId');
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId) && isOwnerIdImmutable('ownerId');
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Rules for the /teams/{teamId}/players collection.
     * @path /teams/{teamId}/players/{playerId}
     * @allow (create) User 'user_abc' can create a player if they are the owner of the team.
     * @allow (update) User 'user_abc' can update a player if they are the owner of the team.
     * @allow (delete) User 'user_abc' can delete a player if they are the owner of the team.
     * @deny (create) User 'user_xyz' cannot create a player in a team owned by 'user_abc'.
     * @deny (update) User 'user_xyz' cannot update a player in a team owned by 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
     match /teams/{teamId}/players/{playerId} {
          allow get: if true;
          allow list: if true;
          allow create: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
          allow update: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
          allow delete: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
     }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their own profile.
     * @allow (update) User 'user_abc' can update their own profile.
     * @deny (create) User 'user_xyz' cannot create a profile for 'user_abc'.
     * @deny (update) User 'user_xyz' cannot update the profile of 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /exercises collection.
     * @path /exercises/{exerciseId}
     * @allow (get) Anyone can read exercises.
     * @allow (list) Anyone can list exercises.
     * @principle Public read access for exercises.
     */
    match /exercises/{exerciseId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /teamInvitations collection.
     * @path /teamInvitations/{invitationId}
     * @principle Restricts team invitations to authenticated users with necessary fields and matching user/team references.
     */
    match /teamInvitations/{invitationId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId != null && request.resource.data.teamId != null && request.resource.data.invitedByUserId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Rules for the /users/{userId}/favorites collection.
      * @path /users/{userId}/favorites/{exerciseId}
      * @principle Users can only manage their own favorite exercises.
      */
     match /users/{userId}/favorites/{exerciseId} {
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
     }

    /**
     * @description Rules for the /users/{userId}/sessions collection.
     * @path /users/{userId}/sessions/{sessionId}
     * @principle Users can only manage their own training sessions.
     */
    match /users/{userId}/sessions/{sessionId} {
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/matches collection.
     * @path /users/{userId}/matches/{matchId}
     * @principle Users can only manage their own match records.
     */
    match /users/{userId}/matches/{matchId} {
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
    }
  }
}