/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for most data, with public read access to exercises.
 *
 * Data Structure:
 * - /teams/{teamId}: Teams, owned by a user.
 * - /teams/{teamId}/players/{playerId}: Players within a team.
 * - /users/{userId}: User profiles, only accessible by the user themselves.
 * - /exercises/{exerciseId}: Publicly accessible exercises.
 * - /teamInvitations/{invitationId}: Invitations to join teams.
 * - /users/{userId}/favorites/{exerciseId}: User-specific favorites.
 * - /users/{userId}/sessions/{sessionId}: User-specific training sessions.
 * - /users/{userId}/matches/{matchId}: User-specific match data.
 *
 * Key Security Decisions:
 * - Users can only create, update, and delete their own teams, sessions, matches and update their profiles.
 * - Exercises are publicly readable.
 * - Listing of users is disallowed.
 * - Team player management is restricted to the team owner.
 * - Team invitations can be managed by the team owner and the invited user.
 *
 * Denormalization for Authorization:
 * - The `Team` document includes an `ownerId` field, enabling direct ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(ownerId) {
        return isSignedIn() && isOwner(ownerId) && resource != null;
    }

    /**
     * @description Teams can be created, updated, and deleted only by their owners.
     * @path /teams/{teamId}
     * @allow (create) User 'user_abc' can create a team with ownerId 'user_abc'.
     * @deny (create) User 'user_xyz' cannot create a team with ownerId 'user_abc'.
     * @allow (get, list) Any user can read team data
     * @allow (update, delete) User 'user_abc' can update/delete a team they own.
     * @deny (update, delete) User 'user_xyz' cannot update/delete team owned by 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Players can only be added, updated, and deleted by the team owner.
     * @path /teams/{teamId}/players/{playerId}
     * @allow (create) User 'user_abc' (owner of team 'team_xyz') can add a player to team 'team_xyz'.
     * @deny (create) User 'user_xyz' cannot add a player to team 'team_xyz'.
     * @allow (get, list) Any user can read player data for a team
     * @allow (update, delete) User 'user_abc' (owner of team 'team_xyz') can update/delete a player in team 'team_xyz'.
     * @deny (update, delete) User 'user_xyz' cannot update/delete a player in team 'team_xyz'.
     * @principle Enforces team ownership for player management.
     */
    match /teams/{teamId}/players/{playerId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid && resource != null;
    }

    /**
     * @description Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their own profile (id matches auth.uid).
     * @deny (create) User 'user_xyz' cannot create a profile with id 'user_abc'.
     * @allow (get, update, delete) User 'user_abc' can get, update, and delete their own profile.
     * @deny (get, update, delete) User 'user_xyz' cannot get, update, or delete profile of 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Exercises are publicly readable, but cannot be created, updated, or deleted through the client.
     * @path /exercises/{exerciseId}
     * @allow (get, list) Any user can read exercise data.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Public read access with no client-side writes.
     */
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Team invitations can be created, updated, and deleted only by the team owner or the invited user.
     * @path /teamInvitations/{invitationId}
     * @allow (create) User 'user_abc' can create an invitation if they are the team owner.
     * @deny (create) User 'user_xyz' cannot create an invitation for a team they don't own.
     * @allow (get) User 'user_abc' can get an invitation if they are the invited user or the team owner.
     * @deny (get) User 'user_xyz' cannot get an invitation if they are not the invited user or the team owner.
     * @allow (update) User 'user_abc' can update an invitation if they are the invited user or the team owner.
     * @deny (update) User 'user_xyz' cannot update an invitation if they are not the invited user or the team owner.
     * @allow (delete) User 'user_abc' can delete an invitation if they are the team owner.
     * @deny (delete) User 'user_xyz' cannot delete an invitation if they are not the team owner.
     * @principle Restricts access to team invitations based on role.
     */
    match /teamInvitations/{invitationId} {
      allow get: if isSignedIn() && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.ownerId == request.auth.uid);
      allow create: if isSignedIn() && get(/databases/$(database)/documents/teams/$(request.resource.data.teamId)).data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.ownerId == request.auth.uid) && resource != null;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.ownerId == request.auth.uid && resource != null;
      allow list: if false; // Listing is disabled for security reasons.
    }

    /**
     * @description Users can only manage their own favorite exercises.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (create, get, update, delete, list) User 'user_abc' can manage their own favorites.
     * @deny (create, get, update, delete, list) User 'user_xyz' cannot manage 'user_abc's favorites.
     * @principle Enforces user-specific data access.
     */
    match /users/{userId}/favorites/{exerciseId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Users can only manage their own training sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create, get, update, delete, list) User 'user_abc' can manage their own sessions.
     * @deny (create, get, update, delete, list) User 'user_xyz' cannot manage 'user_abc's sessions.
     * @principle Enforces user-specific data access.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Users can only manage their own match data.
     * @path /users/{userId}/matches/{matchId}
     * @allow (create, get, update, delete, list) User 'user_abc' can manage their own matches.
     * @deny (create, get, update, delete, list) User 'user_xyz' cannot manage 'user_abc's matches.
     * @principle Enforces user-specific data access.
     */
    match /users/{userId}/matches/{matchId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }
  }
}