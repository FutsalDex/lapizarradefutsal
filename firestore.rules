/**
 * @description This ruleset enforces a strict user-ownership model for user profiles and a coach-ownership model for teams and related data. Team invitations also enforce ownership.
 * @dataStructure
 *  - /users/{userId}: Stores user profile information; only the user can read/write their own profile.
 *  - /teams/{teamId}: Stores team information; only the coach can read/write team data.
 *  - /teams/{teamId}/teamInvitations/{teamInvitationId}: Stores invitations to teams; only the inviting user can create.
 *  - /exercises/{exerciseId}: Stores exercises; read-only for all, write access not defined.
 *  - /teams/{teamId}/sessions/{sessionId}: Stores training sessions; only the coach can read/write.
 *  - /teams/{teamId}/matches/{matchId}: Stores match data; only the coach can read/write.
 * @keySecurityDecisions
 *  - Users can only manage their own profile data.
 *  - Coaches have full control over their teams' data (sessions, matches).
 *  - Listing of all users is disallowed to prevent enumeration attacks.
 *  - Exercises are readable by everyone (for now), but write access is not defined (and therefore denied).
 *  - Data validation is minimal, focusing on ownership and relationship integrity for prototyping.
 *  - Team Invitations can only be created by team coaches and only for the invited user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information. Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User 'user123' can read/write their own profile document.
     * @deny (get, create, update, delete) User 'user456' cannot read/write User 'user123' profile document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to team information. Only the coach can read/write team data.
     * @path /teams/{teamId}
     * @allow (get, create, update, delete) Coach 'coach123' can read/write team 'team456' data if team456.coachId == 'coach123'.
     * @deny (get, create, update, delete) User 'user789' cannot read/write team 'team456' data if team456.coachId != 'user789'.
     * @principle Enforces document ownership for writes.
     */
    match /teams/{teamId} {
      function isCoach(coachId) {
        return request.auth.uid == coachId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isCoach(request.resource.data.coachId);
      allow update: if isSignedIn() && isCoach(resource.data.coachId) && resource != null;
      allow delete: if isSignedIn() && isCoach(resource.data.coachId) && resource != null;
    }

    /**
     * @description Controls access to team invitations. Only the coach can create invitation for a specific user.
     * @path /teams/{teamId}/teamInvitations/{teamInvitationId}
     * @allow (create) Coach 'coach123' can create an invitation for 'user456' to team 'team789'.
     * @deny (create) User 'user456' cannot create an invitation for themselves to join team 'team789'.
     * @principle Enforces invitation creation only by the inviting user.
     */
    match /teams/{teamId}/teamInvitations/{teamInvitationId} {
      function isCoach(teamId) {
         return get(/databases/$(database)/documents/teams/$(teamId)).data.coachId == request.auth.uid;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isCoach(teamId) && request.resource.data.userId != null;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to exercises. Read-only for all, write access not defined.
     * @path /exercises/{exerciseId}
     * @allow (get, list) Any user can read exercises.
     * @deny (create, update, delete) No user can create, update, or delete exercises (explicitly denied).
     * @principle Allows public read access with restricted write access.
     */
    match /exercises/{exerciseId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to training sessions. Only the coach can read/write sessions.
     * @path /teams/{teamId}/sessions/{sessionId}
     * @allow (get, create, update, delete) Coach 'coach123' can read/write sessions for team 'team456' if team456.coachId == 'coach123'.
     * @deny (get, create, update, delete) User 'user789' cannot read/write sessions for team 'team456' if team456.coachId != 'user789'.
     * @principle Enforces document ownership for writes.
     */
    match /teams/{teamId}/sessions/{sessionId} {
      function isCoach(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.coachId == request.auth.uid;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isCoach(teamId);
      allow list: if isCoach(teamId);
      allow create: if isSignedIn() && isCoach(teamId);
      allow update: if isSignedIn() && isCoach(teamId) && resource != null;
      allow delete: if isSignedIn() && isCoach(teamId) && resource != null;
    }

    /**
     * @description Controls access to match data. Only the coach can read/write match data.
     * @path /teams/{teamId}/matches/{matchId}
     * @allow (get, create, update, delete) Coach 'coach123' can read/write matches for team 'team456' if team456.coachId == 'coach123'.
     * @deny (get, create, update, delete) User 'user789' cannot read/write matches for team 'team456' if team456.coachId != 'user789'.
     * @principle Enforces document ownership for writes.
     */
    match /teams/{teamId}/matches/{matchId} {
      function isCoach(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.coachId == request.auth.uid;
      }
       function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isCoach(teamId);
      allow list: if isCoach(teamId);
      allow create: if isSignedIn() && isCoach(teamId);
      allow update: if isSignedIn() && isCoach(teamId) && resource != null;
      allow delete: if isSignedIn() && isCoach(teamId) && resource != null;
    }
  }
}