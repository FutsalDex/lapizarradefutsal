/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for most data, with public read access to exercises.
 *
 * Data Structure:
 * - /teams/{teamId}: Teams, owned by a user.
 * - /teams/{teamId}/players/{playerId}: Players associated with a team.
 * - /users/{userId}: User profiles, only accessible by the user themselves.
 * - /exercises/{exerciseId}: Publicly readable futsal exercises.
 * - /teamInvitations/{invitationId}: Invitations to join a team.
 * - /users/{userId}/favorites/{exerciseId}: User's favorite exercises.
 * - /users/{userId}/sessions/{sessionId}: Training sessions created by a user.
 * - /users/{userId}/matches/{matchId}: Match data recorded by a user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Teams are owned by a user, who has full control over the team data.
 * - Exercises are publicly readable, but write access is restricted to owners.
 * - Listing of user profiles is disallowed.
 * - Team invitations can only be created for a specific user and managed by the team owner.
 *
 * Denormalization for Authorization:
 * - The `Team` document contains an `ownerId` field to simplify ownership checks.
 *
 * Structural Segregation:
 * - Public exercises are stored in a top-level collection (`/exercises`), while private user data (sessions, matches) is stored under the `/users/{userId}` path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows team owners to manage their teams.
     * @path /teams/{teamId}
     */
    match /teams/{teamId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == request.resource.data.ownerId;
      }
      
      function isExistingOwner(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isOwner();
      allow update: if isExistingOwner(teamId);
      allow delete: if isExistingOwner(teamId);
    }

    /**
     * @description Allows team owners to manage team players.
     * @path /teams/{teamId}/players/{playerId}
     */
    match /teams/{teamId}/players/{playerId} {
        function isTeamOwner(teamId) {
            return get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
        }

        allow get, list: if true;
        allow create: if isTeamOwner(teamId);
        allow update: if isTeamOwner(teamId);
        allow delete: if isTeamOwner(teamId);
    }

    /**
     * @description Allows public read access to exercises, with owner-only writes.
     * @path /exercises/{exerciseId}
     */
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create: if request.auth != null; // Allow any authenticated user to create
      allow update: if false; // Require owner field for update
      allow delete: if false; // Require owner field for delete
    }

    /**
     * @description Allows team owners to create team invitations.
     * @path /teamInvitations/{invitationId}
     */
    match /teamInvitations/{invitationId} {
        function isTeamOwner(teamId) {
            return get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
        }

        allow get, list: if true; // Anyone can see invitations
        allow create: if isTeamOwner(request.resource.data.teamId);
        allow update: if false; // Invitations are immutable
        allow delete: if false; // Invitations are immutable
    }

    /**
     * @description Allows users to manage their favorite exercises.
     * @path /users/{userId}/favorites/{exerciseId}
     */
    match /users/{userId}/favorites/{exerciseId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Allows users to manage their training sessions.
     * @path /users/{userId}/sessions/{sessionId}
     */
    match /users/{userId}/sessions/{sessionId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Allows users to manage their match data.
     * @path /users/{userId}/matches/{matchId}
     */
    match /users/{userId}/matches/{matchId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }
  }
}