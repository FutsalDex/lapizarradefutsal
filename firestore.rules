/**
 * @fileoverview Firestore Security Rules for FutsalDex.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data ownership and access control. Users can only
 * read and write their own profile data, create and manage their own teams,
 * sessions, and matches. Public read access is allowed for exercises.
 *
 * Data Structure:
 * - /users/{userId}: User profile data. Only accessible by the user themselves.
 * - /teams/{teamId}: Team data. Only accessible by the team owner.
 * - /teams/{teamId}/members/{memberId}: Team membership details.
 * - /exercises/{exerciseId}: Publicly available exercise data.
 * - /teamInvitations/{invitationId}: Invitations to join a team.
 * - /users/{userId}/favorites/{exerciseId}: User's favorite exercises.
 * - /users/{userId}/sessions/{sessionId}: Training sessions created by a user.
 * - /users/{userId}/matches/{matchId}: Match data recorded by a user.
 *
 * Key Security Decisions:
 * - Users can only list teams.
 * - Exercises are publicly readable but not writable by clients.
 * - Team membership is managed through the /teams/{teamId}/members/{memberId} subcollection,
 *   where document IDs are user IDs.  This allows simplified authorization checks.
 * - Team invitations are secured to prevent unauthorized access or modification.
 *
 * Denormalization for Authorization:
 * - The `Team` entity has an `ownerId` field, which is used to control write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read public exercises.
     * @path /exercises/{exerciseId}
     * @allow (get, list) All users can read exercise data.
     * @deny (create, update, delete) No user can create, update, or delete exercise documents directly.
     * @principle Public read access for exercises.
     */
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (get) Users can read their own profile data.
     * @allow (create) Users can create their own profile data, validating id.
     * @allow (update, delete) Users can update or delete their own profile data.
     * @deny (get, create, update, delete) Unauthorized access is denied.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Manages favorite exercises for a user.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (get, list) Users can read their own favorite exercises.
     * @allow (create, update, delete) Users can create, update, or delete their own favorite exercises.
     * @deny (get, create, update, delete) Unauthorized access is denied.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/favorites/{exerciseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages training sessions created by a user.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (get, list) Users can read their own training sessions.
     * @allow (create, update, delete) Users can create, update, or delete their own training sessions.
     * @deny (get, create, update, delete) Unauthorized access is denied.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Manages match data recorded by a user.
      * @path /users/{userId}/matches/{matchId}
      * @allow (get, list) Users can read their own match data.
      * @allow (create, update, delete) Users can create, update, or delete their own match data.
      * @deny (get, create, update, delete) Unauthorized access is denied.
      * @principle Restricts access to a user's own data tree.
      */
    match /users/{userId}/matches/{matchId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages team data.
     * @path /teams/{teamId}
     * @allow (get, list) All users can list teams. Only team owners can get a specific team.
     * @allow (create) Only authenticated users can create teams, if they are setting themself as owner.
     * @allow (update, delete) Only the team owner can update or delete the team.
     * @deny (get, create, update, delete) Unauthorized access is denied.
     * @principle Enforces document ownership for team management.
     */
    match /teams/{teamId} {
      allow get: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid && request.time < timestamp.date(2025,1,1);
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Manages team membership.
     * @path /teams/{teamId}/members/{memberId}
     * @allow (get, list) Team members can read their own membership status.
     * @allow (create) Team owners can add members.
     * @allow (update) Only the owner can update a member's role
     * @allow (delete) Team owners can remove members.
     * @deny (get, create, update, delete) Unauthorized access is denied.
     * @principle Manages team membership and enforces authorization based on team ownership.
     */
    match /teams/{teamId}/members/{memberId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isTeamOwner(teamId);
      allow update: if isTeamOwner(teamId);
      allow delete: if isTeamOwner(teamId);
    }

    /**
     * @description Manages team invitations.
     * @path /teamInvitations/{invitationId}
     * @allow (get, list) All users can list invitations.
     * @allow (create) Only team owners can create invitations.
     * @allow (update) Users can update invitations where the user id is equal to the authenticated user id.
     * @allow (delete) Only team owners can delete invitations.
     * @deny (get, create, update, delete) Unauthorized access is denied.
     * @principle Ensures only invited users and team owners can manage invitations.
     */
    match /teamInvitations/{invitationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isTeamOwnerByTeamId(request.resource.data.teamId);
      allow update: if request.resource.data.userId == request.auth.uid;
      allow delete: if isTeamOwnerByTeamId(resource.data.teamId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isTeamOwner(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
    }

    function isTeamOwnerByTeamId(teamId) {
      return isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
    }
  }
}