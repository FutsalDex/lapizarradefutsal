/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for most data, with public read access to exercises.
 *
 * Data Structure:
 * - /teams/{teamId}: Teams are owned by a user (ownerId).
 * - /teams/{teamId}/players/{playerId}: Players are part of a team with a defined role.
 * - /users/{userId}: User profiles, only accessible by the user themselves.
 * - /exercises/{exerciseId}: Publicly readable exercises.
 * - /teamInvitations/{invitationId}: Invitations to join teams.
 * - /users/{userId}/favorites/{exerciseId}: User's favorited exercises.
 * - /users/{userId}/sessions/{sessionId}: Training sessions created by a user.
 * - /users/{userId}/matches/{matchId}: Match data recorded by a user.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Exercises are publicly readable but only updatable with owner permission (missing ownerId, see TODO).
 * - Teams are protected via ownerId.
 * - Listing the /users collection is denied.
 *
 * Denormalization for Authorization:
 * - Team documents contain an ownerId field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - User with UID 'user123' can read, create, update, and delete their own profile at /users/user123 if authenticated.
     * @deny (get, create, update, delete) - User with UID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for writes, and prevents unauthorized data access.
     */
    match /users/{userId} {
      // Verified user can read, create, update and delete their own user document.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to exercises, but restricts creation, updating, and deletion.
     * @path /exercises/{exerciseId}
     * @allow (get, list) - Any user, signed in or not, can read the exercise data.
     * @deny (create, update, delete) - No one can create, update, or delete exercises without specific authorization.
     * @principle Allows public read access, but PROTECTS write access with a placeholder rule.
     */
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows the team owner to manage team details.
     * @path /teams/{teamId}
     * @allow (get, list) - Any user can read team data.
     * @allow (create, update, delete) - Only the team owner can modify team data.
     * @principle Enforces ownership for team data.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isTeamOwner(teamId);
      allow delete: if isSignedIn() && isTeamOwner(teamId) && isExistingTeamOwner(teamId);

      /**
       * @description Allows managing players within a team.
       * @path /teams/{teamId}/players/{playerId}
       * @allow (get, list, create, update, delete) - Only team owners can manage players.
       * @principle Restricts player management to team owners.
       */
      match /players/{playerId} {
        allow get, list: if isSignedIn() && isTeamOwner(teamId);
        allow create: if isSignedIn() && isTeamOwner(teamId);
        allow update: if isSignedIn() && isTeamOwner(teamId);
        allow delete: if isSignedIn() && isTeamOwner(teamId);
      }
    }

    /**
     * @description Allows managing team invitations.
     * @path /teamInvitations/{invitationId}
     * @allow (get, list) - Anyone can read invitations (assuming the app handles filtering).
     * @allow (create) - Any authenticated user can send invitations.
     * @allow (update, delete) - Only the invited user or the inviting user can update/delete the invitation.
     * @principle Restricts team invitation management.
     */
    match /teamInvitations/{invitationId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.invitedByUserId == request.auth.uid;
      allow update: if isSignedIn() && (request.auth.uid == resource.data.invitedByUserId);
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.invitedByUserId);
    }

    /**
     * @description Allows users to manage their favorite exercises.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (get, list, create, update, delete) - Only the owner can manage their favorites.
     * @principle Enforces ownership for favorite exercises.
     */
    match /users/{userId}/favorites/{exerciseId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their training sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (get, list, create, update, delete) - Only the owner can manage their sessions.
     * @principle Enforces ownership for training sessions.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their match data.
     * @path /users/{userId}/matches/{matchId}
     * @allow (get, list, create, update, delete) - Only the owner can manage their matches.
     * @principle Enforces ownership for match data.
     */
    match /users/{userId}/matches/{matchId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
  }

  function isTeamOwner(teamId) {
    return get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
  }

  function isExistingTeamOwner(teamId) {
    return exists(/databases/$(database)/documents/teams/$(teamId)) && isTeamOwner(teamId);
  }
}