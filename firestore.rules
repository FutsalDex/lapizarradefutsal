rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the team's owner ID.
     */
    function isTeamOwner(ownerId) {
      return isSignedIn() && request.auth.uid == ownerId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId && resource != null;
    }

    /**
     * @description Rules for the /teams collection.
     * @path /teams/{teamId}
     * @allow (create) User 'A' can create a team if they are authenticated and the ownerId matches their UID.
     * @allow (get) User 'A' can get a team if they are authenticated
     * @allow (list) User 'A' can list teams if they are authenticated
     * @allow (update) User 'A' can update a team if they are the owner of the team.
     * @allow (delete) User 'A' can delete a team if they are the owner of the team.
     * @deny (create) User 'B' cannot create a team with ownerId set to User 'A's ID.
     * @deny (update) User 'B' cannot update a team owned by User 'A'.
     * @deny (delete) User 'B' cannot delete a team owned by User 'A'.
     * @principle Enforces document ownership for writes.
     */
    match /teams/{teamId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.ownerId == request.auth.uid && resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Rules for the /teams/{teamId}/players collection.
     * @path /teams/{teamId}/players/{playerId}
     * @allow (create) Any authenticated user can create a player within a team.
     * @allow (get) Any authenticated user can read a player within a team.
     * @allow (list) Any authenticated user can list players within a team.
     * @allow (update) Any authenticated user can update a player within a team.
     * @allow (delete) Any authenticated user can delete a player within a team.
     * @deny (create) Unauthenticated users cannot create players.
     * @deny (update) Unauthenticated users cannot update players.
     * @deny (delete) Unauthenticated users cannot delete players.
     * @principle Restricts access to the team's player data to authenticated users.
     */
    match /teams/{teamId}/players/{playerId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) User 'A' can create their own user document.
     * @allow (get) User 'A' can read their own user document.
     * @allow (update) User 'A' can update their own user document.
     * @allow (delete) User 'A' can delete their own user document.
     * @deny (create) User 'B' cannot create a user document for User 'A'.
     * @deny (get) User 'B' cannot read User 'A's document.
     * @deny (update) User 'B' cannot update User 'A's document.
     * @deny (delete) User 'B' cannot delete User 'A's document.
     * @deny (list) Listing users is not allowed for privacy reasons.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /exercises collection.
     * @path /exercises/{exerciseId}
     * @allow (get) Any user can read any exercise.
     * @allow (list) Any user can list exercises.
     * @deny (create) Only authenticated users can create new exercises. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) Only the owner can update exercises. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) Only the owner can delete exercises. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Exercises are publicly readable, but write access is restricted.
     */
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /teamInvitations collection.
     * @path /teamInvitations/{invitationId}
     * @allow (create) Any authenticated user can create team invitations.
     * @allow (get) Any authenticated user can get team invitations.
     * @allow (list) Any authenticated user can list team invitations.
     * @allow (update) Only the invited user can update the status of the invitation.
     * @allow (delete) Any authenticated user can delete team invitations.
     * @deny (create) Unauthenticated users cannot create invitations.
     * @deny (update) User 'B' cannot update User 'A's invitation status.
     * @deny (delete) Unauthenticated users cannot delete invitations.
     * @principle Restricts access to team invitations to relevant users.
     */
    match /teamInvitations/{invitationId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.resource.data.userId == request.auth.uid && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /users/{userId}/favorites collection.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (create) User 'A' can create favorites in their own collection.
     * @allow (get) User 'A' can read favorites in their own collection.
     * @allow (list) User 'A' can list favorites in their own collection.
     * @allow (update) User 'A' can update favorites in their own collection.
     * @allow (delete) User 'A' can delete favorites in their own collection.
     * @deny (create) User 'B' cannot create favorites in User 'A's collection.
     * @deny (get) User 'B' cannot read User 'A's favorites.
     * @deny (update) User 'B' cannot update User 'A's favorites.
     * @deny (delete) User 'B' cannot delete User 'A's favorites.
     * @principle Restricts access to a user's own favorite exercises.
     */
    match /users/{userId}/favorites/{exerciseId} {
      allow get, list, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/sessions collection.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create) User 'A' can create sessions in their own collection.
     * @allow (get) User 'A' can read sessions in their own collection.
     * @allow (list) User 'A' can list sessions in their own collection.
     * @allow (update) User 'A' can update sessions in their own collection.
     * @allow (delete) User 'A' can delete sessions in their own collection.
     * @deny (create) User 'B' cannot create sessions in User 'A's collection.
     * @deny (get) User 'B' cannot read User 'A's sessions.
     * @deny (update) User 'B' cannot update User 'A's sessions.
     * @deny (delete) User 'B' cannot delete User 'A's sessions.
     * @principle Restricts access to a user's own training sessions.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get, list, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/matches collection.
     * @path /users/{userId}/matches/{matchId}
     * @allow (create) User 'A' can create matches in their own collection.
     * @allow (get) User 'A' can read matches in their own collection.
     * @allow (list) User 'A' can list matches in their own collection.
     * @allow (update) User 'A' can update matches in their own collection.
     * @allow (delete) User 'A' can delete matches in their own collection.
     * @deny (create) User 'B' cannot create matches in User 'A's collection.
     * @deny (get) User 'B' cannot read User 'A's matches.
     * @deny (update) User 'B' cannot update User 'A's matches.
     * @deny (delete) User 'B' cannot delete User 'A's matches.
     * @principle Restricts access to a user's own match data.
     */
    match /users/{userId}/matches/{matchId} {
      allow get, list, create, update, delete: if isOwner(userId);
    }
  }
}