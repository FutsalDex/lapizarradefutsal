
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // =============================
    // üîí UTILIDADES
    // =============================
    function isAuth() {
      return request.auth != null;
    }

    function authEmail() {
      return isAuth() ? request.auth.token.email : null;
    }

    function isTeamOwner(teamId) {
      return isAuth() &&
        get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
    }

    function isTeamMember(teamId) {
      return isAuth() &&
        get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds != null &&
        get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
    }

    function canAccessTeam(teamId) {
      return isTeamOwner(teamId) || isTeamMember(teamId);
    }
    
    function isAdmin() {
      return isAuth() && authEmail() == 'futsaldex@gmail.com';
    }

    // =============================
    // üß© TEAMS
    // =============================
    match /teams/{teamId} {
      allow get: if canAccessTeam(teamId);
      allow list: if isAuth();
      allow create: if isAuth()
        && request.resource.data.ownerId == request.auth.uid
        && (request.resource.data.memberIds is list)
        && request.resource.data.memberIds.hasAny([request.auth.uid]);
      allow update, delete: if isTeamOwner(teamId);

      // Subcolecciones
      match /players/{playerId} {
        allow get, list: if canAccessTeam(teamId);
        allow create, update: if isTeamOwner(teamId) || isTeamMember(teamId);
        allow delete: if isTeamOwner(teamId);
      }
      match /attendance/{attendanceId} {
        allow read, write: if canAccessTeam(teamId);
      }
    }
    
    // =============================
    // üßë‚Äçü§ù‚Äçüßë TEAM MEMBERS (Cuerpo T√©cnico)
    // =============================
    match /teamMembers/{memberId} {
      allow read: if isAuth() && canAccessTeam(resource.data.teamId);
      allow list: if isAuth(); // Client must filter by teamId
      allow create: if isAuth() && isTeamOwner(request.resource.data.teamId);
      allow update: if isAuth() && isTeamOwner(resource.data.teamId);
      allow delete: if isAuth() && isTeamOwner(resource.data.teamId);
    }

    // =============================
    // ‚öΩ MATCHES (PARTIDOS)
    // =============================
    match /matches/{matchId} {
      allow get: if isAuth() && canAccessTeam(resource.data.teamId);
      allow list: if isAuth(); // El cliente debe filtrar por teamId
      allow create: if isAuth()
        && canAccessTeam(request.resource.data.teamId)
        && request.resource.data.userId == request.auth.uid;
      allow update: if isAuth() && canAccessTeam(resource.data.teamId);
      allow delete: if isAuth() && isTeamOwner(resource.data.teamId);
    }
    
    // =============================
    // üë§ USERS
    // =============================
    match /users/{userId} {
      allow get, update, delete: if isAuth() && request.auth.uid == userId;
      allow create: if isAuth() && request.resource.data.uid == request.auth.uid;
      allow list: if false;
    }

    match /users/{userId}/{subcollection}/{docId} {
      allow read, write: if isAuth() && request.auth.uid == userId;
    }

    // =============================
    // üèãÔ∏è EXERCISES (lectura p√∫blica)
    // =============================
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}

    