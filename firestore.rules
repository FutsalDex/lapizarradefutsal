/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private data and allows public read access for shared resources.
 *
 * Data Structure:
 * - /teams/{teamId}: Stores team information, accessible only to team owners.
 * - /teams/{teamId}/players/{playerId}: Stores team player information, accessible only to team owners.
 * - /users/{userId}: Stores user profile information, accessible only to the user.
 * - /exercises/{exerciseId}: Stores a public library of futsal exercises, publicly readable.
 * - /teamInvitations/{invitationId}: Stores invitations to teams, accessible to the invited user and the inviter.
 * - /users/{userId}/favorites/{exerciseId}: Stores a user's favorited exercises, accessible only to the user.
 * - /users/{userId}/sessions/{sessionId}: Stores training sessions created by a user, accessible only to the user.
 * - /users/{userId}/matches/{matchId}: Stores match data recorded by a user, accessible only to the user.
 *
 * Key Security Decisions:
 * - User profiles and their associated data (favorites, sessions, matches) are strictly private and only accessible to the owning user.
 * - The exercise library is publicly readable, but write access is not defined in the schema.
 * - Team invitations are accessible to both the invited user and the user who sent the invitation.
 * - Team data and its associated players are accessible only to the team owner.
 *
 * Denormalization for Authorization:
 * - The `Team` entity contains an `ownerId` field, which is used to control access to team-related data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows team owners to manage their team's information.
     * @path /teams/{teamId}
     * @allow (create) User with auth UID "user_abc" can create a team document if request.resource.data.ownerId == "user_abc".
     * @allow (update) User with auth UID "user_abc" can update team document with ID "team_123" if they are the owner.
     * @allow (delete) User with auth UID "user_abc" can delete team document with ID "team_123" if they are the owner.
     * @deny (create) User with auth UID "user_xyz" cannot create a team document if request.resource.data.ownerId != "user_xyz".
     * @deny (update) User with auth UID "user_xyz" cannot update team document with ID "team_123" if they are not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /teams/{teamId} {
      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }
      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

     /**
      * @description Allows team owners to manage their team's players.
      * @path /teams/{teamId}/players/{playerId}
      * @allow (create) User with auth UID "user_abc" can create a player document if they are the owner of team with ID "team_123".
      * @allow (update) User with auth UID "user_abc" can update player document with ID "player_456" if they are the owner of team with ID "team_123".
      * @allow (delete) User with auth UID "user_abc" can delete player document with ID "player_456" if they are the owner of team with ID "team_123".
      * @deny (create) User with auth UID "user_xyz" cannot create a player document if they are not the owner of team with ID "team_123".
      * @deny (update) User with auth UID "user_xyz" cannot update player document with ID "player_456" if they are not the owner of team with ID "team_123".
      * @principle Enforces document ownership for writes.
      */
    match /teams/{teamId}/players/{playerId} {
      function isTeamOwner(teamId) {
        return request.auth != null && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
      }

      allow get: if isTeamOwner(teamId);
      allow list: if isTeamOwner(teamId);
      allow create: if isTeamOwner(teamId);
      allow update: if isTeamOwner(teamId);
      allow delete: if isTeamOwner(teamId);
    }

    /**
     * @description Allows users to manage their own profile information.
     * @path /users/{userId}
     * @allow (create) User with auth UID "user_abc" can create their profile document with ID "user_abc".
     * @allow (update) User with auth UID "user_abc" can update their profile document with ID "user_abc".
     * @allow (delete) User with auth UID "user_abc" can delete their profile document with ID "user_abc".
     * @deny (create) User with auth UID "user_xyz" cannot create a profile document with ID "user_abc".
     * @deny (update) User with auth UID "user_xyz" cannot update profile document with ID "user_abc".
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read futsal exercises. Write access is not defined.
     * @path /exercises/{exerciseId}
     * @allow (get) Any user can read an exercise document.
     * @allow (list) Any user can list exercise documents.
     * @deny (create) No one can create exercise documents without further refinement.
     * @principle Allows public read access to the exercise library.
     */
    match /exercises/{exerciseId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows invited users and the inviter to access team invitations.
     * @path /teamInvitations/{invitationId}
     * @allow (get) User with auth UID "user_abc" can read invitation document with ID "invite_123" if they are either the invited user or the inviter.
     * @allow (create) User with auth UID "user_abc" can create an invitation document.
     * @deny (update) User with auth UID "user_xyz" cannot update invitation document with ID "invite_123" if they are not either the invited user or the inviter.
     * @principle Restricts access to team invitations to relevant parties.
     */
    match /teamInvitations/{invitationId} {
      function isInvitedUserOrInviter(userId, invitedByUserId) {
        return request.auth != null && (request.auth.uid == userId || request.auth.uid == invitedByUserId);
      }
      allow get: if isInvitedUserOrInviter(resource.data.userId, resource.data.invitedByUserId);
      allow list: if false;
      allow create: if request.auth.uid == request.resource.data.invitedByUserId;
      allow update: if isInvitedUserOrInviter(resource.data.userId, resource.data.invitedByUserId) && resource != null;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own favorited exercises.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (create) User with auth UID "user_abc" can create a favorite exercise document under their user ID.
     * @allow (update) User with auth UID "user_abc" can update a favorite exercise document under their user ID.
     * @allow (delete) User with auth UID "user_abc" can delete a favorite exercise document under their user ID.
     * @deny (create) User with auth UID "user_xyz" cannot create a favorite exercise document under user ID "user_abc".
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/favorites/{exerciseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own training sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create) User with auth UID "user_abc" can create a session document under their user ID.
     * @allow (update) User with auth UID "user_abc" can update a session document under their user ID.
     * @allow (delete) User with auth UID "user_abc" can delete a session document under their user ID.
     * @deny (create) User with auth UID "user_xyz" cannot create a session document under user ID "user_abc".
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/sessions/{sessionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own match data.
     * @path /users/{userId}/matches/{matchId}
     * @allow (create) User with auth UID "user_abc" can create a match document under their user ID.
     * @allow (update) User with auth UID "user_abc" can update a match document under their user ID.
     * @allow (delete) User with auth UID "user_abc" can delete a match document under their user ID.
     * @deny (create) User with auth UID "user_xyz" cannot create a match document under user ID "user_abc".
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/matches/{matchId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}