rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create, update, get, delete, list) if the authenticated user's ID matches the user ID in the path.
     * @deny (create, update, delete) if the authenticated user's ID does not match the user ID in the path.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows team owners to manage their teams and team members to access team details.
     * @path /teams/{teamId}
     * @allow (get, list) if true (public read).
     * @allow (create) if the authenticated user's ID matches the team's ownerId field.
     * @allow (update, delete) if the authenticated user's ID matches the team's ownerId field and the document exists.
     * @deny (create, update, delete) if the authenticated user is not the team owner.
     * @principle Enforces team ownership.
     */
    match /teams/{teamId} {
        function isOwner() {
            return request.auth.uid == resource.data.ownerId;
        }

        function isCreatingOwner() {
            return request.auth.uid == request.resource.data.ownerId;
        }

        function isExistingOwner() {
            return request.auth.uid == resource.data.ownerId && exists(resource);
        }

        allow get, list: if true;
        allow create: if isCreatingOwner();
        allow update: if isExistingOwner();
        allow delete: if isExistingOwner();

        /**
         * @description Allows team members to read their roles and team owners to manage roles.
         * @path /teams/{teamId}/members/{memberId}
         */
        match /teams/{teamId}/members/{memberId} {
            function isTeamOwner(teamId) {
                return get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
            }

            function isMember(teamId, memberId) {
                return exists(/databases/$(database)/documents/teams/$(teamId)/members/$(memberId));
            }

            function isExistingMember(teamId, memberId) {
              return isMember(teamId, memberId) && exists(resource);
            }

            allow get: if isMember(teamId, memberId);
            allow list: if false; // Prevent listing of team members.
            allow create: if isTeamOwner(teamId);
            allow update: if isTeamOwner(teamId) && isExistingMember(teamId, memberId);
            allow delete: if isTeamOwner(teamId) && isExistingMember(teamId, memberId);
        }
    }

    /**
     * @description Allows public read access to exercises, but restricts write access to admins (not implemented).
     * @path /exercises/{exerciseId}
     * @allow (get, list) to all users.
     * @deny (create, update, delete) to all users, as admin roles are not yet implemented.
     * @principle Provides a public exercise library.
     */
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check for write access.
    }

    /**
     * @description Restricts access to team invitations.
     * @path /teamInvitations/{invitationId}
     * @allow (get) if the authenticated user is the invited user.
     * @deny (list) to prevent unauthorized enumeration of invitations.
     * @allow (create) if the authenticated user is the inviter.
     * @deny (update, delete) to all users.
     * @principle Enforces privacy for team invitations.
     */
    match /teamInvitations/{invitationId} {
        function isInvitedUser() {
            return request.auth.uid == resource.data.userId;
        }

        function isInviter() {
            return request.auth.uid == request.resource.data.invitedByUserId;
        }

        allow get: if isInvitedUser();
        allow list: if false;
        allow create: if isInviter();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows a user to manage their favorite exercises.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (get, create, update, delete, list) if the authenticated user's ID matches the user ID in the path.
     * @deny (get, create, update, delete, list) if the authenticated user's ID does not match the user ID in the path.
     * @principle Enforces document ownership for user favorites.
     */
    match /users/{userId}/favorites/{exerciseId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && exists(resource);
        }

        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their training sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (get, create, update, delete, list) if the authenticated user's ID matches the user ID in the path.
     * @deny (get, create, update, delete, list) if the authenticated user's ID does not match the user ID in the path.
     * @principle Enforces document ownership for user sessions.
     */
    match /users/{userId}/sessions/{sessionId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && exists(resource);
        }

        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their match data.
     * @path /users/{userId}/matches/{matchId}
     * @allow (get, create, update, delete, list) if the authenticated user's ID matches the user ID in the path.
     * @deny (get, create, update, delete, list) if the authenticated user's ID does not match the user ID in the path.
     * @principle Enforces document ownership for user matches.
     */
    match /users/{userId}/matches/{matchId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && exists(resource);
        }

        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }
  }
}