/**
 * @fileoverview Firestore Security Rules for Futsal Training App
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * Strict ownership is enforced for user-specific data, while public read access is allowed for certain collections.
 *
 * Data Structure:
 * - /teams/{teamId}: Stores team information, accessible to team members.
 * - /teams/{teamId}/members/{memberId}: Stores user roles within a team.
 * - /users/{userId}: Stores user profiles, accessible only to the user.
 * - /exercises/{exerciseId}: Stores a public library of exercises, publicly readable but write-protected.
 * - /teamInvitations/{invitationId}: Stores invitations to join a team, accessible to the invited user.
 * - /users/{userId}/favorites/{exerciseId}: Stores user's favorite exercises, accessible only to the user.
 * - /users/{userId}/sessions/{sessionId}: Stores user-created training sessions, accessible only to the user.
 * - /users/{userId}/matches/{matchId}: Stores user-recorded match data, accessible only to the user.
 *
 * Key Security Decisions:
 * - Public listing of users is disallowed.
 * - Public read access is enabled for the exercises collection.
 * - Team membership and roles are denormalized for efficient access control.
 * - Strict ownership is enforced for all user-specific data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication required for all protected resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the requested user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-specific data access.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document (used for updates and deletes).
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Prevents modification of non-existent documents.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Teams collection: stores team information.
     * @path /teams/{teamId}
     * @allow (create) User with valid data for the team.
     * @allow (get) Any signed-in user to get the team.
     * @allow (update, delete) Owner to update or delete their teams.
     * @deny (create, update, delete) Any user to create/modify a team if not signed-in.
     * @principle Enforces team ownership for write operations and signed-in for reads.
     */
    match /teams/{teamId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Team Members subcollection: stores team members and their roles.
     * @path /teams/{teamId}/members/{memberId}
     * @allow (create, update) Only team coaches can add or modify members.
     * @allow (get, list) Any signed-in user to read team member information.
     * @allow (delete) Only a coach can remove a team member.
     * @deny (create, update, delete) Any user not in the team, can't write to collection.
     * @principle Restricts team member management to team coaches.
     */
    match /teams/{teamId}/members/{memberId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if get(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)).data.role == 'coach';
        allow update: if get(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)).data.role == 'coach';
        allow delete: if get(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)).data.role == 'coach';
    }

    /**
     * @description User Profiles: stores user profile information.
     * @path /users/{userId}
     * @allow (create) Only the user can create their profile, with a matching user ID.
     * @allow (get, update, delete) Only the user can get, update, or delete their profile.
     * @deny (create, update, delete) Any other user from creating/modifying this data.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Exercises collection: stores the public library of exercises.
     * @path /exercises/{exerciseId}
     * @allow (get, list) Anyone can view the exercises.
     * @deny (create, update, delete) No one can create, update, or delete exercises (admin only).
     * @principle Public read access with restricted write access.
     */
    match /exercises/{exerciseId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Team Invitations: stores invitations to join a team.
     * @path /teamInvitations/{invitationId}
     * @allow (get) User who has the invitation (userId matches).
     * @allow (list) User who has the invitation (userId matches).
     * @deny (create, update, delete) Nobody can create, update or delete team invitations.
     * @principle Ensures only the invited user can access invitation details.
     */
    match /teamInvitations/{invitationId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description User Favorites subcollection: stores a user's favorite exercises.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (create, get, list, update, delete) Only the user can manage their favorite exercises.
     * @deny (create, update, delete) Any other user from modifying this data.
     * @principle Enforces strict user-ownership for favorite exercises.
     */
    match /users/{userId}/favorites/{exerciseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User Sessions subcollection: stores training sessions created by a user.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create, get, list, update, delete) Only the user can manage their training sessions.
     * @deny (create, update, delete) Any other user from modifying this data.
     * @principle Enforces strict user-ownership for training sessions.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description User Matches subcollection: stores match data recorded by a user.
     * @path /users/{userId}/matches/{matchId}
     * @allow (create, get, list, update, delete) Only the user can manage their match data.
     * @deny (create, update, delete) Any other user from modifying this data.
     * @principle Enforces strict user-ownership for match data.
     */
    match /users/{userId}/matches/{matchId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}