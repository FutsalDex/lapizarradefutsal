/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model with public read access for some collections.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /exercises/{exerciseId}: Public collection of exercises, with owner-only writes.
 * - /teams/{teamId}: Teams, owned by a specific user.
 * - /teamInvitations/{invitationId}: Invitations to teams.
 * - /users/{userId}/favorites/{exerciseId}: User's favorite exercises, accessible only by the user.
 * - /users/{userId}/sessions/{sessionId}: User's training sessions, accessible only by the user.
 * - /users/{userId}/matches/{matchId}: User's match data, accessible only by the user.
 * - /teams/{teamId}/players/{playerId}: Roster of players in a team, the document ID is the user ID.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Exercises are publicly readable but only the owner can create, update, or delete them.
 * - Teams can be created by a user with the user being the owner.
 * - Team invitations can be created, read and updated.
 * - Favorites, sessions and matches are private to each user.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `Team` entity has an `ownerId` field to determine team ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner of the profile.
     * @deny (get, create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read exercises, but only the owner can create, update, or delete them.
     * @path /exercises/{exerciseId}
     * @allow (get, list) Everyone can read exercises.
     * @allow (create) Only the user who is the owner can create an exercise and `authorId` must match `auth.uid`.
     * @allow (update, delete) Only the user who is the owner can update or delete an exercise.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Public read access with owner-only writes.
     */
    match /exercises/{exerciseId} {
      function isOwner() {
        return request.auth.uid == resource.data.authorId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Allows users to create teams, and only the owner can update or delete them.
     * @path /teams/{teamId}
     * @allow (get) if true
     * @allow (create) if the user is signed in.
     * @allow (update, delete) if the user is the owner of the team.
     * @deny (create) if the user is not signed in.
     * @deny (update, delete) if the user is not the owner.
     * @principle Enforces team ownership.
     */
    match /teams/{teamId} {
        function isOwner() {
          return request.auth.uid == resource.data.ownerId;
        }
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
        allow update: if isSignedIn() && isOwner();
        allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Manages invitations to join teams.
     * @path /teamInvitations/{invitationId}
     */
    match /teamInvitations/{invitationId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Allows a user to manage their favorite exercises.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (get, list, create, update, delete) if the user is the owner.
     * @deny (get, list, create, update, delete) if the user is not the owner.
     * @principle Enforces ownership of favorite exercises.
     */
    match /users/{userId}/favorites/{exerciseId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows a user to manage their training sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (get, list, create, update, delete) if the user is the owner.
     * @deny (get, list, create, update, delete) if the user is not the owner.
     * @principle Enforces ownership of training sessions.
     */
    match /users/{userId}/sessions/{sessionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows a user to manage their match data.
     * @path /users/{userId}/matches/{matchId}
     * @allow (get, list, create, update, delete) if the user is the owner.
     * @deny (get, list, create, update, delete) if the user is not the owner.
     * @principle Enforces ownership of match data.
     */
    match /users/{userId}/matches/{matchId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages players inside a team.
     * @path /teams/{teamId}/players/{playerId}
     */
    match /teams/{teamId}/players/{playerId} {
        function isTeamOwner(teamId) {
          return request.auth.uid == get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId;
        }
        function isSignedIn() {
          return request.auth != null;
        }

        allow get: if isSignedIn() && isTeamOwner(teamId);
        allow list: if isSignedIn() && isTeamOwner(teamId);
        allow create: if isSignedIn() && isTeamOwner(teamId);
        allow update: if isSignedIn() && isTeamOwner(teamId);
        allow delete: if isSignedIn() && isTeamOwner(teamId);
    }
  }
}