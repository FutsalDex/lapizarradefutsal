/**
 * @fileoverview Firestore Security Rules for Futsal Training App
 *
 * Core Philosophy:
 * This ruleset prioritizes secure user and team data access.
 * Users can only read/write their own profile data. Teams have owner-based access control,
 * with public read access to exercises. Team members can be listed,
 * but not created, updated or deleted from here.
 *
 * Data Structure:
 * - /users/{userId}: User profile data.
 * - /teams/{teamId}: Team information with an `ownerId` field.
 * - /teams/{teamId}/players/{playerId}: Team roster, playerId is userId.
 * - /exercises/{exerciseId}: Publicly accessible exercise library.
 * - /teamInvitations/{invitationId}: Invitations to teams.
 * - /users/{userId}/favorites/{exerciseId}: User's favorited exercises.
 * - /users/{userId}/sessions/{sessionId}: Training sessions created by a user.
 * - /users/{userId}/matches/{matchId}: Match data recorded by a user.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Exercises are publicly readable but only admins can create/update/delete (not implemented in this prototype).
 * - Default security posture is strict: if a relationship isn't explicitly allowed, it's denied.
 *
 * Denormalization for Authorization:
 * - Team documents include an `ownerId` field to simplify ownership checks.
 *
 * Structural Segregation:
 * - User-created content (sessions, matches, favorites) is stored in user-specific subcollections to ensure privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their own profile.
     * @allow (get, update, delete, list) User with matching ID can read, update, and delete their own profile.
     * @deny User cannot list all users.
     * @deny User cannot create a profile with a different ID.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows team owners to manage their teams.
     * @path /teams/{teamId}
     * @allow (create) User with matching ID can create a team with themselves as owner.
     * @allow (get, update, delete) Team owner can read, update, and delete the team.
     * @deny Other users cannot create, read, update, or delete teams.
     * @principle Enforces document ownership for writes.
     */
    match /teams/{teamId} {
      function isOwner(teamId) {
        return request.auth != null && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isOwner(teamId);
      allow delete: if isOwner(teamId);
    }

    /**
     * @description Allows team owners to manage team players
     * @path /teams/{teamId}/players/{playerId}
     * @allow (get, list) Any authenticated user can list players in a team
     * @deny (create, update, delete) Only the coach can add players
     * @principle Enforces document ownership for writes.
     */
    match /teams/{teamId}/players/{playerId} {
        function isTeamMember(teamId) {
            return request.auth != null && exists(/databases/$(database)/documents/teams/$(teamId)/players/$(request.auth.uid));
        }
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to exercises, but restricts writes.
     * @path /exercises/{exerciseId}
     * @allow (get, list) Any user can read the exercises.
     * @deny (create, update, delete) Only admins can create, update, or delete exercises (not implemented).
     * @principle Public read access with owner-only writes.
     */
    match /exercises/{exerciseId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check.
    }

    /**
     * @description Allows management of team invitations.
     * @path /teamInvitations/{invitationId}
     * @allow create: if request.resource.data.invitedByUserId == request.auth.uid;
     * @allow get: if request.auth.uid == resource.data.userId || request.auth.uid == resource.data.invitedByUserId;
     * @allow list: if false;
     * @allow update: if request.auth.uid == resource.data.userId || request.auth.uid == resource.data.invitedByUserId;
     * @allow delete: if request.auth.uid == resource.data.invitedByUserId;
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /teamInvitations/{invitationId} {
        function isInvitedUser(invitationId) {
            return request.auth != null && request.auth.uid == get(/databases/$(database)/documents/teamInvitations/$(invitationId)).data.userId;
        }
        function isInviterUser(invitationId) {
            return request.auth != null && request.auth.uid == get(/databases/$(database)/documents/teamInvitations/$(invitationId)).data.invitedByUserId;
        }
      allow get: if isInvitedUser(invitationId) || isInviterUser(invitationId);
      allow list: if false;
      allow create: if request.resource.data.invitedByUserId == request.auth.uid;
      allow update: if isInvitedUser(invitationId) || isInviterUser(invitationId);
      allow delete: if isInviterUser(invitationId);
    }

    /**
     * @description Allows a user to manage their favorite exercises.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (create, get, update, delete, list) User can only manage their own favorites.
     * @deny Other users cannot access or modify another user's favorites.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/favorites/{exerciseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their training sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create, get, update, delete, list) User can only manage their own sessions.
     * @deny Other users cannot access or modify another user's sessions.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/sessions/{sessionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their match data.
     * @path /users/{userId}/matches/{matchId}
     * @allow (create, get, update, delete, list) User can only manage their own match data.
     * @deny Other users cannot access or modify another user's match data.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/matches/{matchId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}