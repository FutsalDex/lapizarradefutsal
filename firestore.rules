/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private data and allows public read access for certain collections.
 *
 * Data Structure:
 * - User profiles are stored under /users/{userId}.
 * - Teams are stored under /teams/{teamId} and are owned by a user.
 * - Team players are stored under /teams/{teamId}/players/{playerId}, the playerId corresponds with a userId.
 * - Exercises are stored under /exercises/{exerciseId} and are publicly accessible.
 * - Team invitations are stored under /teamInvitations/{invitationId}.
 * - User-specific data (favorites, sessions, matches) is nested under /users/{userId}.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Teams can only be created by authenticated users, and ownership is enforced for updates and deletes.
 * - Exercises are publicly readable, but write access is not granted.
 * - Team invitations can be created, but access control is based on the invited user and inviter.
 * - Users can only manage their own favorite exercises, sessions, and match data.
 * - Data shape validation is minimized for prototyping speed, focusing on authorization and relationship integrity.
 *
 * Denormalization for Authorization:
 * - The `Team` document contains an `ownerId` field to simplify ownership checks.
 *
 * Structural Segregation:
 * - Public exercises are stored in a top-level collection (/exercises) separate from user-specific data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile if userId == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their profile if userId == 'user_abc'.
     * @deny (create, get, update, delete) - User with UID 'user_def' cannot access user profile with userId == 'user_abc'.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows authenticated users to create teams, and only the owner can update/delete them.
     * @path /teams/{teamId}
     * @allow (create) - User with UID 'user_abc' can create a team.
     * @allow (get, list) - Any user can get/list teams.
     * @allow (update, delete) - User with UID 'user_abc' can update/delete a team if they are the owner.
     * @deny (update, delete) - User with UID 'user_def' cannot update/delete a team owned by 'user_abc'.
     * @principle Enforces team ownership for write operations, public read.
     */
    match /teams/{teamId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }
      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Allows team owners to manage players, identified by their user ID.
     * @path /teams/{teamId}/players/{playerId}
     * @allow (create, update, delete) - Team owner can create, update, delete players.
     * @allow (get) - Any authenticated user can get team players.
     * @deny (create, update, delete) - Non-team owners cannot create, update, or delete players.
     * @principle Team ownership and player management.
     */
    match /teams/{teamId}/players/{playerId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isTeamOwner(teamId) {
          return get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn() && isTeamOwner(teamId);
        allow update: if isSignedIn() && isTeamOwner(teamId) && resource != null;
        allow delete: if isSignedIn() && isTeamOwner(teamId) && resource != null;
    }

    /**
     * @description Allows public read access to exercises. Write access is denied.
     * @path /exercises/{exerciseId}
     * @allow (get, list) - Any user can read exercises.
     * @deny (create, update, delete) - No user can create, update, or delete exercises.
     * @principle Public read-only access.
     */
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows creation of team invitations, but restricts access based on the invited user and inviter.
     * @path /teamInvitations/{invitationId}
     * @allow (create) - Any authenticated user can create a team invitation.
     * @allow (get) - Only the invited user can get the invitation.
     * @allow (delete) - Only the inviter can delete the invitation.
     * @deny (get) - Other users cannot access the invitation.
     * @principle Invitation access control based on roles.
     */
    match /teamInvitations/{invitationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isInvitedUser(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isInviter(invitedByUserId) {
          return request.auth != null && request.auth.uid == invitedByUserId;
      }

      allow get: if isSignedIn() && isInvitedUser(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if isSignedIn() && isInviter(resource.data.invitedByUserId) && resource != null;
    }

    /**
     * @description Allows a user to manage their favorite exercises.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (create, get, update, delete, list) - User with UID 'user_abc' can manage their own favorite exercises.
     * @deny (create, get, update, delete, list) - User with UID 'user_def' cannot access favorite exercises of user 'user_abc'.
     * @principle User-ownership for favorite exercises.
     */
    match /users/{userId}/favorites/{exerciseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their training sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create, get, update, delete, list) - User with UID 'user_abc' can manage their own training sessions.
     * @deny (create, get, update, delete, list) - User with UID 'user_def' cannot access training sessions of user 'user_abc'.
     * @principle User-ownership for training sessions.
     */
    match /users/{userId}/sessions/{sessionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their match data.
     * @path /users/{userId}/matches/{matchId}
     * @allow (create, get, update, delete, list) - User with UID 'user_abc' can manage their own match data.
     * @deny (create, get, update, delete, list) - User with UID 'user_def' cannot access match data of user 'user_abc'.
     * @principle User-ownership for match data.
     */
    match /users/{userId}/matches/{matchId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}