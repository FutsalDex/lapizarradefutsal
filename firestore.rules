rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading and writing of user profile information.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is disallowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows reading public exercises.
     * @path /exercises/{exerciseId}
     */
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows creating, reading, updating, and deleting teams, restricted to team owners.
     * @path /teams/{teamId}
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isTeamOwner(teamId);
      allow delete: if isSignedIn() && isTeamOwner(teamId);
    }

     /**
      * @description Allows managing team players, restricted to team owners.
      * @path /teams/{teamId}/players/{playerId}
      */
    match /teams/{teamId}/players/{playerId} {
        allow get, list: if isSignedIn() && isTeamOwner(teamId);
        allow create: if isSignedIn() && isTeamOwner(teamId);
        allow update: if isSignedIn() && isTeamOwner(teamId);
        allow delete: if isSignedIn() && isTeamOwner(teamId);
    }

    /**
     * @description Allows creating, reading, updating, and deleting team invitations.
     * @path /teamInvitations/{invitationId}
     */
    match /teamInvitations/{invitationId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows managing a user's favorite exercises.
     * @path /users/{userId}/favorites/{exerciseId}
     */
    match /users/{userId}/favorites/{exerciseId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows managing training sessions created by a user.
     * @path /users/{userId}/sessions/{sessionId}
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows managing match data recorded by a user.
     * @path /users/{userId}/matches/{matchId}
     */
    match /users/{userId}/matches/{matchId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Placeholder for additional rules.
     * @path N/A
     */
    match /{path=**} {
      allow read, write: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isTeamOwner(teamId) {
    return get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
  }
}