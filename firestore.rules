/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for most data, with some public read access for shared resources.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /teams/{teamId}: Stores team data, accessible only to the team owner.
 * - /teams/{teamId}/players/{playerId}: Subcollection storing team players. Team owner can manage, user can view their own player doc.
 * - /exercises/{exerciseId}: Stores a public library of exercises, publicly readable but only writable by an admin (currently not enforced).
 * - /teamInvitations/{invitationId}: Stores invitations to teams; accessible to the invited user and the inviter.
 * - /users/{userId}/favorites/{exerciseId}: Stores user's favorite exercises; accessible only to the user.
 * - /users/{userId}/sessions/{sessionId}: Stores training sessions; accessible only to the user.
 * - /users/{userId}/matches/{matchId}: Stores match data; accessible only to the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Exercises are publicly readable.
 * - Team ownership is enforced via the 'ownerId' field on the team document.
 * - Team Invitations are accessible to the invited user and the user who sent the invitation.
 *
 * Denormalization for Authorization:
 * - Team documents store the ownerId to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to a user's own profile.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows team owners to manage their teams.
     * @path /teams/{teamId}
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isTeamOwner(teamId);
      allow delete: if isTeamOwner(teamId);
    }

    /**
     * @description Allows team owners to manage team players. Users can only view their own player doc.
     * @path /teams/{teamId}/players/{playerId}
     */
    match /teams/{teamId}/players/{playerId} {
        allow get: if isSignedIn() && (request.auth.uid == playerId || isTeamOwner(teamId));
        allow list: if isTeamOwner(teamId);
        allow create: if isTeamOwner(teamId);
        allow update: if isTeamOwner(teamId);
        allow delete: if isTeamOwner(teamId);
    }

    /**
     * @description Allows public read access to exercises, but requires authentication for write access.
     * @path /exercises/{exerciseId}
     */
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows the invited user and the inviter to access team invitations.
     * @path /teamInvitations/{invitationId}
     */
    match /teamInvitations/{invitationId} {
      allow get: if isSignedIn() && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.invitedByUserId);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.invitedByUserId);
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.invitedByUserId);
    }

    /**
     * @description Allows a user to manage their own favorite exercises.
     * @path /users/{userId}/favorites/{exerciseId}
     */
    match /users/{userId}/favorites/{exerciseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own training sessions.
     * @path /users/{userId}/sessions/{sessionId}
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own match data.
     * @path /users/{userId}/matches/{matchId}
     */
    match /users/{userId}/matches/{matchId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isTeamOwner(teamId) {
    return isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
  }
}