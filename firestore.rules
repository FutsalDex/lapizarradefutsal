/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for most data, with some public read access for shared resources.
 *
 * Data Structure:
 * - /teams/{teamId}: Teams are owned by a user (ownerId).
 * - /teams/{teamId}/players/{playerId}: Team players with roles
 * - /users/{userId}: User profiles, only accessible to the user themselves.
 * - /exercises/{exerciseId}: Publicly readable exercises.
 * - /teamInvitations/{invitationId}: Invitations to join teams.
 * - /users/{userId}/favorites/{exerciseId}: User's favorite exercises.
 * - /users/{userId}/sessions/{sessionId}: Training sessions created by a user.
 * - /users/{userId}/matches/{matchId}: Match data recorded by a user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Teams are owned by the user who created them.
 * - Exercises are publicly readable but can only be created, updated, or deleted by the owner.
 * - Team invitations can be listed by any authenticated user, but creation is limited to authorized users (e.g., team owners).
 * - Users can only manage their own favorite exercises, training sessions, and match data.
 *
 * Denormalization for Authorization:
 * - Team documents store the ownerId of the team creator, to avoid needing a separate lookup.
 * - TeamInvitation documents store the teamName to avoid needing a separate lookup.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to team documents. Only the team owner can create, update, or delete a team.
     * @path /teams/{teamId}
     * @allow (create) User with ID 'user123' creates a new team with ownerId 'user123'.
     * @allow (get, list) Any signed-in user can read a team.
     * @allow (update, delete) User with ID 'user123' updates/deletes team with ownerId 'user123'.
     * @deny (create) User with ID 'user456' tries to create a team with ownerId 'user123'.
     * @deny (update, delete) User with ID 'user456' tries to update/delete team with ownerId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /teams/{teamId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Allows management of team players.
     * @path /teams/{teamId}/players/{playerId}
     * @allow (create) User with role 'coach' creates a new player for the team.
     * @allow (get, list) Any signed-in user can read a team player.
     * @allow (update, delete) User with role 'coach' can update/delete team player.
     * @deny (create) User without role 'coach' tries to create a team player.
     * @deny (update, delete) User without role 'coach' tries to update/delete team player.
     * @principle Enforces role-based access control for team players.
     */
    match /teams/{teamId}/players/{playerId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && isTeamCoach(teamId);
    }

    /**
     * @description Allows access to user profile information. Only the user themselves can read or write their profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile with ID 'user123'.
     * @allow (get, list) User with ID 'user123' reads their own profile.
     * @allow (update, delete) User with ID 'user123' updates/deletes their own profile.
     * @deny (create) User with ID 'user456' tries to create a profile with ID 'user123'.
     * @deny (get, list, update, delete) User with ID 'user456' tries to access profile with ID 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to exercises, but restricts creation, updating, and deletion to the owner.
     * @path /exercises/{exerciseId}
     * @allow (get, list) Any user can read exercises.
     * @allow (create) User with ID 'user123' creates a new exercise.
     * @allow (update, delete) User with ID 'user123' updates/deletes exercise they own.
     * @deny (create) User with ID 'user456' tries to create an exercise without proper ownership.
     * @deny (update, delete) User with ID 'user456' tries to update/delete an exercise they don't own.
     * @principle Allows public read access with owner-only writes.
     */
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows access to team invitations.
     * @path /teamInvitations/{invitationId}
     * @allow (get, list) Any signed-in user can list team invitations.
     * @allow (create) User with ID 'user123' creates a team invitation.
     * @allow (update, delete) User with ID 'user123' updates/deletes a team invitation they own.
     * @deny (create) User with ID 'user456' tries to create a team invitation without proper authorization.
     * @deny (update, delete) User with ID 'user456' tries to update/delete a team invitation they don't own.
     * @principle Enforces authorization checks for team invitations.
     */
    match /teamInvitations/{invitationId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows users to manage their favorite exercises.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (create) User with ID 'user123' creates a favorite exercise.
     * @allow (get, list) User with ID 'user123' reads their favorite exercises.
     * @allow (update, delete) User with ID 'user123' updates/deletes their favorite exercises.
     * @deny (create) User with ID 'user456' tries to create a favorite exercise for user 'user123'.
     * @deny (get, list, update, delete) User with ID 'user456' tries to access favorite exercises of user 'user123'.
     * @principle Restricts access to a user's own favorite exercises.
     */
    match /users/{userId}/favorites/{exerciseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to manage their training sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create) User with ID 'user123' creates a training session.
     * @allow (get, list) User with ID 'user123' reads their training sessions.
     * @allow (update, delete) User with ID 'user123' updates/deletes their training sessions.
     * @deny (create) User with ID 'user456' tries to create a training session for user 'user123'.
     * @deny (get, list, update, delete) User with ID 'user456' tries to access training sessions of user 'user123'.
     * @principle Restricts access to a user's own training sessions.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to manage their match data.
     * @path /users/{userId}/matches/{matchId}
     * @allow (create) User with ID 'user123' creates match data.
     * @allow (get, list) User with ID 'user123' reads their match data.
     * @allow (update, delete) User with ID 'user123' updates/deletes their match data.
     * @deny (create) User with ID 'user456' tries to create match data for user 'user123'.
     * @deny (get, list, update, delete) User with ID 'user456' tries to access match data of user 'user123'.
     * @principle Restricts access to a user's own match data.
     */
    match /users/{userId}/matches/{matchId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isTeamCoach(teamId) {
        // TODO: Implement logic to check if the user is a coach of the team.
        return false;
    }
  }
}