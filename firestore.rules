/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user-created content (teams, sessions, matches)
 * and provides public read access to a shared exercise library.
 *
 * Data Structure:
 * - /teams/{teamId}: Teams created by users, secured by ownerId.
 * - /teams/{teamId}/players/{playerId}: Player data secured via parent team's ownership.
 * - /users/{userId}: User profiles, accessible only to the user.
 * - /exercises/{exerciseId}: Public exercise library, read-only for all.
 * - /teamInvitations/{invitationId}: Invitations to teams.
 * - /users/{userId}/favorites/{exerciseId}: User's favorite exercises, secured by user ID.
 * - /users/{userId}/sessions/{sessionId}: Training sessions created by a user, secured by user ID.
 * - /users/{userId}/matches/{matchId}: Match data recorded by a user, secured by user ID.
 *
 * Key Security Decisions:
 * - Exercises are publicly readable but not writable.
 * - Users can only read and write their own profile data.
 * - Team creation and management is restricted to the team owner.
 * - Listing of user profiles is denied.
 *
 * Denormalization for Authorization:
 * - Team documents include an `ownerId` field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Requires authentication for protected resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource, based on the provided userId.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing resource.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces document ownership and resource existence for updates/deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Secures the /teams collection, enforcing ownership for writes.
     * @path /teams/{teamId}
     * @allow (create) User A creates a team with ownerId set to User A's UID.
     * @deny (create) User A attempts to create a team with ownerId set to User B's UID.
     * @deny (update) User A attempts to update a team owned by User B.
     * @deny (delete) User A attempts to delete a team owned by User B.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Secures the /teams/{teamId}/players/{playerId} subcollection, inheriting team ownership.
     * @path /teams/{teamId}/players/{playerId}
     * @allow (create) User A, the owner of team X, adds a player to team X.
     * @deny (create) User B attempts to add a player to team X (owned by User A).
     * @deny (update) User A attempts to update a player in team X owned by User B.
     * @deny (delete) User A attempts to delete a player from team X owned by User B.
     * @principle Inherits team ownership for writes, allows public reads.
     */
    match /teams/{teamId}/players/{playerId} {
        allow get, list: if true;
        allow create: if get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
        allow update: if get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid && resource != null;
        allow delete: if get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid && resource != null;
    }

    /**
     * @description Secures the /users collection, allowing only the user to read/write their own profile.
     * @path /users/{userId}
     * @allow (get) User A reads their own profile data.
     * @allow (create) User A creates their profile with ID matching their UID.
     * @deny (get) User A attempts to read User B's profile data.
     * @deny (list) Anyone attempts to list all user profiles.
     * @deny (create) User A attempts to create a profile with an ID different from their UID.
     * @deny (update) User A attempts to update User B's profile data.
     * @deny (delete) User A attempts to delete User B's profile data.
     * @principle Restricts access to a user's own data tree, enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the /exercises collection, making it publicly readable but not writable.
     * @path /exercises/{exerciseId}
     * @allow (get) Anyone reads an exercise.
     * @allow (list) Anyone lists exercises.
     * @deny (create) Anyone attempts to create an exercise.
     * @deny (update) Anyone attempts to update an exercise.
     * @deny (delete) Anyone attempts to delete an exercise.
     * @principle Allows public reads, restricts writes.
     */
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures the /teamInvitations collection.
     * @path /teamInvitations/{invitationId}
     */
    match /teamInvitations/{invitationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures the /users/{userId}/favorites/{exerciseId} subcollection, allowing only the user to manage their favorites.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (get) User A reads their own favorite exercise.
     * @allow (create) User A favorites an exercise.
     * @deny (get) User A attempts to read User B's favorite exercise.
     * @deny (update) User A attempts to modify their favorite exercise.
     * @deny (delete) User A unfavorites an exercise.
     * @principle Restricts access to a user's own data tree, enforces document ownership for writes.
     */
    match /users/{userId}/favorites/{exerciseId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/sessions/{sessionId} subcollection, allowing only the user to manage their sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (get) User A reads their own session.
     * @allow (create) User A creates a session.
     * @deny (get) User A attempts to read User B's session.
     * @deny (update) User A attempts to modify a session owned by User B.
     * @deny (delete) User A attempts to delete a session owned by User B.
     * @principle Restricts access to a user's own data tree, enforces document ownership for writes.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/matches/{matchId} subcollection, allowing only the user to manage their matches.
     * @path /users/{userId}/matches/{matchId}
     * @allow (get) User A reads their own match data.
     * @allow (create) User A creates a match.
     * @deny (get) User A attempts to read User B's match data.
     * @deny (update) User A attempts to modify a match owned by User B.
     * @deny (delete) User A attempts to delete a match owned by User B.
     * @principle Restricts access to a user's own data tree, enforces document ownership for writes.
     */
    match /users/{userId}/matches/{matchId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}