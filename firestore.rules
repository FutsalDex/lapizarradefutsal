/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for most data, with some public read access for shared resources.
 *
 * Data Structure:
 * - /teams/{teamId}: Teams are owned by a user.
 * - /teams/{teamId}/players/{playerId}: Players within a team, with 'player' or 'coach' roles.
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /exercises/{exerciseId}: Publicly readable exercises.
 * - /teamInvitations/{invitationId}: Invitations to join teams.
 * - /users/{userId}/favorites/{exerciseId}: User's favorite exercises.
 * - /users/{userId}/sessions/{sessionId}: Training sessions created by a user.
 * - /users/{userId}/matches/{matchId}: Match data recorded by a user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Teams are owned by a user, who has full control.
 * - Exercises are publicly readable, but only owners can create/update/delete.
 * - Team invitations can be listed by any authenticated user and only be modified by the invited user.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - Teams have an `ownerId` field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - User 'alice' (auth.uid: 'alice') can access /users/alice
     * @deny (get, create, update, delete) - User 'bob' (auth.uid: 'bob') cannot access /users/alice
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows team owners to manage their teams.
     * @path /teams/{teamId}
     * @allow (get, list) - Any signed in user can read team data
     * @allow (create) - User 'alice' (auth.uid: 'alice') can create a team with ownerId 'alice'.
     * @allow (update, delete) - User 'alice' (auth.uid: 'alice') can update/delete a team if they are the owner.
     * @deny (create) - User 'bob' (auth.uid: 'bob') cannot create a team with ownerId 'alice'.
     * @deny (update, delete) - User 'bob' (auth.uid: 'bob') cannot update/delete a team owned by 'alice'.
     * @principle Enforces document ownership for writes.
     */
    match /teams/{teamId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return request.auth.uid == resource.data.ownerId;
      }

        function canCreateTeam() {
            return isSignedIn()
                && request.resource.data.ownerId == request.auth.uid;
        }

      function isExistingOwner() {
        return isSignedIn() && isOwner();
      }

      allow get, list: if isSignedIn();
      allow create: if canCreateTeam();
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

   /**
     * @description Allows team owners to manage their teams' players.
     * @path /teams/{teamId}/players/{playerId}
     * @allow (get, list) - Any signed in user can read a team's players
     * @allow (create, update, delete) - User 'alice' (auth.uid: 'alice') can create/update/delete players in a team if they are the owner.
     * @deny (create, update, delete) - User 'bob' (auth.uid: 'bob') cannot create/update/delete players in a team owned by 'alice'.
     * @principle Enforces document ownership for writes.
     */
    match /teams/{teamId}/players/{playerId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isTeamOwner(teamId) {
            return get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
        }

        function isExistingTeamOwner(teamId) {
            return isTeamOwner(teamId) && resource != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && isTeamOwner(teamId);
        allow update: if isSignedIn() && isExistingTeamOwner(teamId);
        allow delete: if isSignedIn() && isExistingTeamOwner(teamId);
    }


    /**
     * @description Allows anyone to read exercises, but only owners to create, update, or delete them.
     * @path /exercises/{exerciseId}
     * @allow (get, list) - Any user (signed in or not) can read exercises.
     * @allow (create) - User 'alice' (auth.uid: 'alice') can create an exercise. The 'id' field is not validated.
     * @allow (update, delete) - User 'alice' (auth.uid: 'alice') can update/delete an exercise. The 'id' field is not validated.
     * @deny (create) - User 'bob' (auth.uid: 'bob') cannot create an exercise.
     * @deny (update, delete) - User 'bob' (auth.uid: 'bob') cannot update/delete an exercise.
     * @principle Public read, owner-only writes.
     */
    match /exercises/{exerciseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any signed in user to list team invitations.
     * @path /teamInvitations/{invitationId}
     * @allow (get) - User 'alice' (auth.uid: 'alice') can get a team invitation.
     * @allow (list) - Any signed in user can list team invitations.
     * @allow (create) - User 'alice' (auth.uid: 'alice') can create a team invitation. The 'id' field is not validated.
     * @allow (update) - Only the invited user can update their invitation status.
     * @deny (delete) - Nobody can delete team invitations.
     * @principle Public read, owner-only writes.
     */
    match /teamInvitations/{invitationId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isInvitedUser() {
            return request.auth.uid == resource.data.userId;
        }

        function isExistingInvitedUser() {
            return isInvitedUser() && resource != null;
        }

        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isExistingInvitedUser();
        allow delete: if false;
    }

    /**
     * @description Allows users to manage their favorite exercises.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (get, create, update, delete) - User 'alice' (auth.uid: 'alice') can access /users/alice/favorites/exercise1
     * @deny (get, create, update, delete) - User 'bob' (auth.uid: 'bob') cannot access /users/alice/favorites/exercise1
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/favorites/{exerciseId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their training sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (get, create, update, delete) - User 'alice' (auth.uid: 'alice') can access /users/alice/sessions/session1
     * @deny (get, create, update, delete) - User 'bob' (auth.uid: 'bob') cannot access /users/alice/sessions/session1
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/sessions/{sessionId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their match data.
     * @path /users/{userId}/matches/{matchId}
     * @allow (get, create, update, delete) - User 'alice' (auth.uid: 'alice') can access /users/alice/matches/match1
     * @deny (get, create, update, delete) - User 'bob' (auth.uid: 'bob') cannot access /users/alice/matches/match1
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/matches/{matchId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}