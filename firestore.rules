/**
 * @fileoverview Firestore Security Rules for FutsalDex.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data ownership and restricts access based on authentication status.
 * It ensures that only authenticated users can access their own data, while public data (exercises) can be read by anyone.
 *
 * Data Structure:
 * - /teams/{teamId}: Stores team data, accessible to the team owner.
 * - /teams/{teamId}/players/{playerId}: Stores team players and their roles.
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /exercises/{exerciseId}: Stores public exercises, readable by anyone.
 * - /teamInvitations/{invitationId}: Stores team invitations, with access controlled by user IDs.
 * - /users/{userId}/favorites/{exerciseId}: Stores user's favorite exercises, accessible only to the user.
 * - /users/{userId}/sessions/{sessionId}: Stores user's training sessions, accessible only to the user.
 * - /users/{userId}/matches/{matchId}: Stores user's match data, accessible only to the user.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Public exercises are readable by all users.
 * - All write operations are protected by authentication checks.
 *
 * Denormalization for Authorization:
 * - Team documents include an `ownerId` field, denormalizing the user-team relationship for faster authorization checks.
 * - TeamInvitation documents include `teamName` and `userId` for simpler read operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the existing owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines access rules for the /teams/{teamId} collection.
     * @path /teams/{teamId}
     * @allow (create) - Authenticated user creates a team with ownerId matching their UID.
     * @deny (create) - Unauthenticated user attempts to create a team.
     * @allow (get, list) - Authenticated owner can read teams they own.
     * @deny (get, list) - Other users attempts to read teams.
     * @allow (update, delete) - Authenticated owner can update/delete teams they own.
     * @deny (update, delete) - Other users attempts to update/delete teams.
     * @principle Enforces document ownership for writes.
     */
    match /teams/{teamId} {
      allow get, list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Defines access rules for the /teams/{teamId}/players/{playerId} subcollection.
     * @path /teams/{teamId}/players/{playerId}
     * @allow (create) - Authenticated owner can create players for their team.
     * @deny (create) - Unauthenticated user attempts to create a player.
     * @allow (get, list) - Authenticated owner can read players for their team.
     * @deny (get, list) - Other users attempts to read players.
     * @allow (update, delete) - Authenticated owner can update/delete players for their team.
     * @deny (update, delete) - Other users attempts to update/delete players.
     * @principle Enforces document ownership for writes in subcollections.
     */
    match /teams/{teamId}/players/{playerId} {
      allow get, list: if false;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid && resource != null;
    }

    /**
     * @description Defines access rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own user profile.
     * @deny (create) - Unauthenticated user attempts to create a user profile.
     * @allow (get) - Authenticated user can get their own user profile.
     * @deny (get) - Other users attempts to get user profiles.
     * @deny (list) - Listing users is not allowed.
     * @allow (update, delete) - Authenticated user can update/delete their own user profile.
     * @deny (update, delete) - Other users attempts to update/delete user profiles.
     * @principle Enforces document ownership for writes and restricts listing.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for the /exercises/{exerciseId} collection.
     * @path /exercises/{exerciseId}
     * @allow (get, list) - All users can read the exercises.
     * @allow (create, update, delete) - No user can create, update or delete exercises.
     * @principle Allows public read access for exercises.
     */
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines access rules for the /teamInvitations/{invitationId} collection.
     * @path /teamInvitations/{invitationId}
     * @allow (get, list) - All users can read all invitation docs.
     * @allow (create) - Authenticated user can create a invitation.
     * @allow (update, delete) - No user can update or delete an invitation document.
     * @principle Allows public read access for invitations.
     */
    match /teamInvitations/{invitationId} {
      allow get, list: if false; // TODO: remove if there's no privacy reason to prevent invitation listing

      allow create: if isSignedIn(); // CRITICAL: Add more conditions after prototyping phase

      allow update, delete: if false;
    }

    /**
     * @description Defines access rules for the /users/{userId}/favorites/{exerciseId} subcollection.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own favorite exercises.
     * @deny (create, get, list, update, delete) - Other users attempts to manage favorite exercises.
     * @principle Enforces document ownership for writes in subcollections.
     */
    match /users/{userId}/favorites/{exerciseId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

        /**
     * @description Defines access rules for the /users/{userId}/sessions/{sessionId} subcollection.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own sessions.
     * @deny (create, get, list, update, delete) - Other users attempts to manage sessions.
     * @principle Enforces document ownership for writes in subcollections.
     */
     match /users/{userId}/sessions/{sessionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for the /users/{userId}/matches/{matchId} subcollection.
     * @path /users/{userId}/matches/{matchId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own matches.
     * @deny (create, get, list, update, delete) - Other users attempts to manage matches.
     * @principle Enforces document ownership for writes in subcollections.
     */
     match /users/{userId}/matches/{matchId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }
  }
}