/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for most data, with public read access to the exercises collection.
 *
 * Data Structure:
 * - /teams/{teamId}: Teams are owned by a user (ownerId).
 * - /teams/{teamId}/players/{playerId}: Players are members of teams. The document ID is the user ID.
 * - /users/{userId}: User profiles, only accessible to the user themselves.
 * - /exercises/{exerciseId}: Public collection of exercises.
 * - /teamInvitations/{invitationId}: Invitations to join teams.
 * - /users/{userId}/favorites/{exerciseId}: User-specific list of favorite exercises.
 * - /users/{userId}/sessions/{sessionId}: Training sessions created by a user.
 * - /users/{userId}/matches/{matchId}: Match data recorded by a user.
 *
 * Key Security Decisions:
 * - Users can only manage their own profile data.
 * - Teams are owned by a specific user, who has full control.
 * - Exercises are publicly readable but cannot be created, updated, or deleted through the client.
 * - Listing of user documents is denied to prevent information disclosure.
 * - Users can only manage their own favorite exercises, sessions, and match data.
 *
 * Denormalization for Authorization:
 * - The `Team` entity contains an `ownerId` field to easily check team ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Teams are owned by a user, who has full control.
     * @path /teams/{teamId}
     * @allow (create) User with UID 'user_abc' can create a team with ownerId: 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a team with ownerId: 'user_abc'.
     * @principle Enforces team ownership for writes.
     */
    match /teams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid && resource != null;
    }

    /**
     * @description Players are members of teams. The document ID is the user ID.
     * @path /teams/{teamId}/players/{playerId}
     * @allow (create) User with UID 'user_abc' can create a player document for team 'team_123' if they own the team.
     * @deny (create) User with UID 'user_xyz' cannot create a player document for team 'team_123' if they don't own the team.
     * @principle Enforces team ownership for writes.
     */
    match /teams/{teamId}/players/{playerId} {
        allow get: if get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
        allow list: if get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
        allow create: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
        allow update: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid && resource != null;
        allow delete: if isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid && resource != null;
    }

    /**
     * @description User profiles, only accessible to the user themselves.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores the public library of futsal exercises.
     * @path /exercises/{exerciseId}
     * @allow (get) Any user can read exercises.
     * @deny (create) No user can create exercises (admin only).
     * @principle Public read access, admin-only writes.
     */
    match /exercises/{exerciseId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores all team invitations.
     * @path /teamInvitations/{invitationId}
     * @allow (create) Any authenticated user can create an invitation.
     * @deny (update) No unauthenticated user can update an invitation.
     * @principle Allows creation and modification of invites
     */
    match /teamInvitations/{invitationId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores a user's favorite exercises. The document ID is the exercise ID.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (create) User with UID 'user_abc' can favorite an exercise.
     * @deny (create) User with UID 'user_xyz' cannot favorite an exercise for 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/favorites/{exerciseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores training sessions created by a user.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create) User with UID 'user_abc' can create their own session.
     * @deny (create) User with UID 'user_xyz' cannot create a session for 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores match data recorded by a user.
     * @path /users/{userId}/matches/{matchId}
     * @allow (create) User with UID 'user_abc' can create their own match data.
     * @deny (create) User with UID 'user_xyz' cannot create match data for 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/matches/{matchId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}