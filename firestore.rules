rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to team data only to the team's owner.
     * @path /teams/{teamId}
     */
    match /teams/{teamId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(teamId) {
        return isSignedIn() && request.auth.uid == resource.data.ownerId;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerId;
      allow update: if isSignedIn() && isOwner(teamId);
      allow delete: if isSignedIn() && isOwner(teamId);
    }

    /**
     * @description Grants access to team player data only to the team's owner.
     * @path /teams/{teamId}/players/{playerId}
     */
    match /teams/{teamId}/players/{playerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTeamOwner(teamId) {
        return isSignedIn() && get(/databases/$(database)/documents/teams/$(teamId)).data.ownerId == request.auth.uid;
      }

      allow get: if isTeamOwner(teamId);
      allow list: if false;
      allow create: if isTeamOwner(teamId);
      allow update: if isTeamOwner(teamId);
      allow delete: if isTeamOwner(teamId);
    }

    /**
     * @description Grants access to user profile data only to the user.
     * @path /users/{userId}
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants public read access to exercises. Write operations are denied to clients.
     * @path /exercises/{exerciseId}
     */
    match /exercises/{exerciseId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to team invitations. Users can only read/write invitations
     *              that involve them (either as the invited user or the inviter).
     * @path /teamInvitations/{invitationId}
     */
    match /teamInvitations/{invitationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && (resource.data.userId == request.auth.uid || resource.data.invitedByUserId == request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.invitedByUserId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.invitedByUserId;
    }

    /**
     * @description Grants access to a user's favorite exercises only to that user.
     * @path /users/{userId}/favorites/{exerciseId}
     */
    match /users/{userId}/favorites/{exerciseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants access to training sessions created by a user only to that user.
     * @path /users/{userId}/sessions/{sessionId}
     */
    match /users/{userId}/sessions/{sessionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants access to match data recorded by a user only to that user.
     * @path /users/{userId}/matches/{matchId}
     */
    match /users/{userId}/matches/{matchId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}