/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for most data, with some public read access for shared resources.
 *
 * Data Structure:
 * - /teams/{teamId}: Teams are owned by a user (ownerId).
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /exercises/{exerciseId}: Public library of exercises, read-only for all, writeable by no one.
 * - /teamInvitations/{invitationId}: Invitations to join teams, managed by team owners.
 * - /users/{userId}/favorites/{exerciseId}: User's favorite exercises, only accessible by the user.
 * - /users/{userId}/sessions/{sessionId}: Training sessions created by a user, only accessible by the user.
 * - /users/{userId}/matches/{matchId}: Match data recorded by a user, only accessible by the user.
 *
 * Key Security Decisions:
 * - Users can only access their own user document.
 * - Listing of all users is disallowed.
 * - Exercises are publicly readable but not writable (a true public resource).
 * - Team creation is restricted to authenticated users.
 * - Team updates and deletes are restricted to the team owner.
 * - Team Invitations can only be created by a team owner.
 *
 * Denormalization for Authorization:
 * - The `Team` entity includes an `ownerId` field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read exercises, but nobody to create, update, or delete them.
     * @path /exercises/{exerciseId}
     * @allow (get, list): Anyone can read exercises.
     * @deny (create, update, delete): No one can create, update, or delete exercises.
     * @principle Exercises are a public read-only resource.
     */
    match /exercises/{exerciseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to user documents to the owner.
     * @path /users/{userId}
     * @allow (get): User can read their own profile.
     * @allow (create): User can create their own profile if the ID matches their auth UID.
     * @allow (update, delete): User can update or delete their own profile.
     * @deny (get): User cannot read another user's profile.
     * @deny (create): User cannot create a profile with an ID that doesn't match their auth UID.
     * @principle Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to team documents to the owner.
     * @path /teams/{teamId}
     * @allow (get, list): Anyone can read and list teams.
     * @allow (create): User can create a team if the ownerId matches their auth UID.
     * @allow (update, delete): Only the team owner can update or delete the team.
     * @deny (create): User cannot create a team with an ownerId that doesn't match their auth UID.
     * @principle Enforces document ownership for writes, public read.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid && request.resource.data.createdAt == request.time;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Restricts access to team invitation documents.
     * @path /teamInvitations/{invitationId}
     * @allow (get): Anyone can read
     * @allow (create): Only the team owner can create an invitation for their team.
     * @allow (update, delete): Only the team owner can update or delete the invitation.
     * @principle Enforces that only team owners can manage invitations to their teams.
     */
    match /teamInvitations/{invitationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to favorite exercises to the owner.
     * @path /users/{userId}/favorites/{exerciseId}
     * @allow (get, list, create, update, delete): Only the user can manage their own favorites.
     * @deny (get, list, create, update, delete): Other users cannot access this user's favorites.
     * @principle Enforces user-ownership for favorite exercises.
     */
    match /users/{userId}/favorites/{exerciseId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to training sessions to the owner.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (get, list, create, update, delete): Only the user can manage their own sessions.
     * @deny (get, list, create, update, delete): Other users cannot access this user's sessions.
     * @principle Enforces user-ownership for training sessions.
     */
    match /users/{userId}/sessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to match data to the owner.
     * @path /users/{userId}/matches/{matchId}
     * @allow (get, list, create, update, delete): Only the user can manage their own match data.
     * @deny (get, list, create, update, delete): Other users cannot access this user's match data.
     * @principle Enforces user-ownership for match data.
     */
    match /users/{userId}/matches/{matchId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
  }
}